lua_package_path '/home/tumani1/workspace/next_tv/lua_nginx/?.lua;;';

server {
    index index.html index.htm;
    listen testcontent;

    server_name testcontent;
    set $next_tv_root /home/tumani1/workspace/next_tv;

    access_log /var/log/nginx/testcontent.access.log;
    error_log /var/log/nginx/testcontent.error.log;

    # Обработка пользователя
    location ~^/content/(users|persons|topics|media|mediaunit)/(?<id>\d+)/(?<name>(?<first>.)(?<second>..)[^_]+)(_(?<width>\d+)x(?<height>\d+))$ {
         set $access 0;
         set $prefix $1;

         set_by_lua $access '
            local access, prefix = ngx.var.access, ngx.var.prefix;
            local width, height = ngx.var.width, ngx.var.height;
            local sizes = {
                users     = {{30, 30}, {100, 100}},
                persons   = {{30, 30}, {100, 100}},
                topics    = {{30, 30}, {100, 100}},
                media     = {{30, 30}, {100, 100}},
                mediaunit = {{30, 30}, {100, 100}}
            };

            if not (width and height) or width == "" or height == "" then
                return 1;
            end

            width, height = tonumber(width, nil), tonumber(height, nil);
            if sizes[prefix] then
                for k,v in pairs(sizes[prefix]) do
                    if (width == v[1] and height == v[2]) then
                        access = 1;
                        break;
                    end
                end
            end

            return access;
        ';

        if ($access) {
            rewrite_by_lua_file $next_tv_root/lua_nginx/content_client.lua;
            break;
        }

        rewrite ^.*$ /error_404 last;
    }

    # Обработка ошибок
    location /error_404 {
        return 404;
    }

    location / {
        rewrite ^.*$ /error_404 last;
    }

}
